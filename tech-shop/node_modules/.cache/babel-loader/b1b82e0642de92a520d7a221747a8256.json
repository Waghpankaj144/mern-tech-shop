{"ast":null,"code":"const cartReducer = (state, action) => {\n  if (action.type === \"ADD_TO_CART\") {\n    var _state$cart;\n\n    let {\n      id,\n      color,\n      amount,\n      product\n    } = action.payload; // tackle the existing product\n\n    let existingProduct = (_state$cart = state.cart) === null || _state$cart === void 0 ? void 0 : _state$cart.find(curItem => curItem.id === id + color);\n\n    if (existingProduct) {\n      var _state$cart2;\n\n      let updatedProduct = (_state$cart2 = state.cart) === null || _state$cart2 === void 0 ? void 0 : _state$cart2.map(curElem => {\n        if (curElem.id === id + color) {\n          let newAmount = curElem.amount + amount;\n\n          if (newAmount >= curElem.max) {\n            newAmount = curElem.max;\n          }\n\n          return { ...curElem,\n            amount: newAmount\n          };\n        } else {\n          return curElem;\n        }\n      });\n      return { ...state,\n        cart: updatedProduct\n      };\n    } else {\n      let cartProduct = {\n        id: id + color,\n        name: product.name,\n        color,\n        amount,\n        image: product.image[0].url,\n        price: product.price,\n        max: product.stock\n      };\n      return { ...state,\n        cart: [...state.cart, cartProduct]\n      };\n    }\n  } // to set the increment and decrement\n\n\n  if (action.type === \"SET_DECREMENT\") {\n    var _state$cart3;\n\n    let updatedProduct = (_state$cart3 = state.cart) === null || _state$cart3 === void 0 ? void 0 : _state$cart3.map(curElem => {\n      if (curElem.id === action.payload) {\n        let decAmount = curElem.amount - 1;\n\n        if (decAmount <= 1) {\n          decAmount = 1;\n        }\n\n        return { ...curElem,\n          amount: decAmount\n        };\n      } else {\n        return curElem;\n      }\n    });\n    return { ...state,\n      cart: updatedProduct\n    };\n  }\n\n  if (action.type === \"SET_INCREMENT\") {\n    var _state$cart4;\n\n    let updatedProduct = (_state$cart4 = state.cart) === null || _state$cart4 === void 0 ? void 0 : _state$cart4.map(curElem => {\n      if (curElem.id === action.payload) {\n        let incAmount = curElem.amount + 1;\n\n        if (incAmount >= curElem.max) {\n          incAmount = curElem.max;\n        }\n\n        return { ...curElem,\n          amount: incAmount\n        };\n      } else {\n        return curElem;\n      }\n    });\n    return { ...state,\n      cart: updatedProduct\n    };\n  }\n\n  if (action.type === \"REMOVE_ITEM\") {\n    var _state$cart5;\n\n    let updatedCart = (_state$cart5 = state.cart) === null || _state$cart5 === void 0 ? void 0 : _state$cart5.filter(curItem => curItem.id !== action.payload);\n    return { ...state,\n      cart: updatedCart\n    };\n  } // to empty or to clear to cart\n\n\n  if (action.type === \"CLEAR_CART\") {\n    return { ...state,\n      cart: []\n    };\n  } // if (action.type === \"CART_TOTAL_ITEM\") {\n  //   let updatedItemVal = state.cart.reduce((initialVal, curElem) => {\n  //     let { amount } = curElem;\n  //     initialVal = initialVal + amount;\n  //     return initialVal;\n  //   }, 0);\n  //   return {\n  //     ...state,\n  //     total_item: updatedItemVal,\n  //   };\n  // }\n  // if (action.type === \"CART_TOTAL_PRICE\") {\n  //   let total_price = state.cart.reduce((initialVal, curElem) => {\n  //     let { price, amount } = curElem;\n  //     initialVal = initialVal + price * amount;\n  //     return initialVal;\n  //   }, 0);\n  //   return {\n  //     ...state,\n  //     total_price,\n  //   };\n  // }\n\n\n  if (action.type === \"CART_ITEM_PRICE_TOTAL\") {\n    var _state$cart6;\n\n    let {\n      total_item,\n      total_price\n    } = (_state$cart6 = state.cart) === null || _state$cart6 === void 0 ? void 0 : _state$cart6.reduce((accum, curElem) => {\n      let {\n        price,\n        amount\n      } = curElem;\n      accum.total_item += amount;\n      accum.total_price += price * amount;\n      return accum;\n    }, {\n      total_item: 0,\n      total_price: 0\n    });\n    return { ...state,\n      total_item,\n      total_price\n    };\n  }\n\n  return state;\n};\n\nexport default cartReducer; // https://stackoverflow.com/questions/63117470/how-to-return-two-values-in-reduce#:~:text=You%20cannot%20return%20two%20values%20in%20reduce%20.","map":{"version":3,"names":["cartReducer","state","action","type","id","color","amount","product","payload","existingProduct","cart","find","curItem","updatedProduct","map","curElem","newAmount","max","cartProduct","name","image","url","price","stock","decAmount","incAmount","updatedCart","filter","total_item","total_price","reduce","accum"],"sources":["C:/Users/User/Downloads/totalitycorp-frontend-challenge-main/tech-shop/src/reducer/cartReducer.js"],"sourcesContent":["const cartReducer = (state, action) => {\r\n  if (action.type === \"ADD_TO_CART\") {\r\n    let { id, color, amount, product } = action.payload;\r\n\r\n    // tackle the existing product\r\n\r\n    let existingProduct = state.cart?.find(\r\n      (curItem) => curItem.id === id + color\r\n    );\r\n\r\n    if (existingProduct) {\r\n      let updatedProduct = state.cart?.map((curElem) => {\r\n        if (curElem.id === id + color) {\r\n          let newAmount = curElem.amount + amount;\r\n\r\n          if (newAmount >= curElem.max) {\r\n            newAmount = curElem.max;\r\n          }\r\n          return {\r\n            ...curElem,\r\n            amount: newAmount,\r\n          };\r\n        } else {\r\n          return curElem;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        cart: updatedProduct,\r\n      };\r\n    } else {\r\n      let cartProduct = {\r\n        id: id + color,\r\n        name: product.name,\r\n        color,\r\n        amount,\r\n        image: product.image[0].url,\r\n        price: product.price,\r\n        max: product.stock,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, cartProduct],\r\n      };\r\n    }\r\n  }\r\n\r\n  // to set the increment and decrement\r\n  if (action.type === \"SET_DECREMENT\") {\r\n    let updatedProduct = state.cart?.map((curElem) => {\r\n      if (curElem.id === action.payload) {\r\n        let decAmount = curElem.amount - 1;\r\n\r\n        if (decAmount <= 1) {\r\n          decAmount = 1;\r\n        }\r\n\r\n        return {\r\n          ...curElem,\r\n          amount: decAmount,\r\n        };\r\n      } else {\r\n        return curElem;\r\n      }\r\n    });\r\n    return { ...state, cart: updatedProduct };\r\n  }\r\n\r\n  if (action.type === \"SET_INCREMENT\") {\r\n    let updatedProduct = state.cart?.map((curElem) => {\r\n      if (curElem.id === action.payload) {\r\n        let incAmount = curElem.amount + 1;\r\n\r\n        if (incAmount >= curElem.max) {\r\n          incAmount = curElem.max;\r\n        }\r\n\r\n        return {\r\n          ...curElem,\r\n          amount: incAmount,\r\n        };\r\n      } else {\r\n        return curElem;\r\n      }\r\n    });\r\n    return { ...state, cart: updatedProduct };\r\n  }\r\n\r\n  if (action.type === \"REMOVE_ITEM\") {\r\n    let updatedCart = state.cart?.filter(\r\n      (curItem) => curItem.id !== action.payload\r\n    );\r\n    return {\r\n      ...state,\r\n      cart: updatedCart,\r\n    };\r\n  }\r\n\r\n  // to empty or to clear to cart\r\n  if (action.type === \"CLEAR_CART\") {\r\n    return {\r\n      ...state,\r\n      cart: [],\r\n    };\r\n  }\r\n\r\n  // if (action.type === \"CART_TOTAL_ITEM\") {\r\n  //   let updatedItemVal = state.cart.reduce((initialVal, curElem) => {\r\n  //     let { amount } = curElem;\r\n\r\n  //     initialVal = initialVal + amount;\r\n  //     return initialVal;\r\n  //   }, 0);\r\n\r\n  //   return {\r\n  //     ...state,\r\n  //     total_item: updatedItemVal,\r\n  //   };\r\n  // }\r\n\r\n  // if (action.type === \"CART_TOTAL_PRICE\") {\r\n  //   let total_price = state.cart.reduce((initialVal, curElem) => {\r\n  //     let { price, amount } = curElem;\r\n\r\n  //     initialVal = initialVal + price * amount;\r\n\r\n  //     return initialVal;\r\n  //   }, 0);\r\n\r\n  //   return {\r\n  //     ...state,\r\n  //     total_price,\r\n  //   };\r\n  // }\r\n\r\n  if (action.type === \"CART_ITEM_PRICE_TOTAL\") {\r\n    let { total_item, total_price } = state.cart?.reduce(\r\n      (accum, curElem) => {\r\n        let { price, amount } = curElem;\r\n\r\n        accum.total_item += amount;\r\n        accum.total_price += price * amount;\r\n\r\n        return accum;\r\n      },\r\n      {\r\n        total_item: 0,\r\n        total_price: 0,\r\n      }\r\n    );\r\n    return {\r\n      ...state,\r\n      total_item,\r\n      total_price,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport default cartReducer;\r\n\r\n// https://stackoverflow.com/questions/63117470/how-to-return-two-values-in-reduce#:~:text=You%20cannot%20return%20two%20values%20in%20reduce%20.\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}